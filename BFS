
// Java Code : 


class Solution {
    public ArrayList<Integer> bfs(ArrayList<ArrayList<Integer>> adj) {
        // code here
        int n = adj.size();
        ArrayList<Integer> ans = new ArrayList<>();
        Queue<Integer> q = new LinkedList<>();
        boolean[] visited = new boolean[n];
        q.offer(0);
        visited[0] = true;
        
        while(!q.isEmpty()){
            int i = q.poll();
            ans.add(i);
            for(int j:adj.get(i)){
              if (!visited[j]) {
                    visited[j] = true;
                    q.add(j);
                }
            }
        }
        
        return ans;
    }
}



// C++ Code : 

class Solution {
  public:
    
    vector<int> bfs(vector<vector<int>> &adj) {
        int n = adj.size();
        vector<int> ans;
        vector<bool> visited(n, false);
        queue<int> q;
        
        q.push(0);
        visited[0] = true;
        
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            ans.push_back(node);
            
            for (int neighbor : adj[node]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.push(neighbor);
                }
            }
        }
        
        return ans;
    }
};
